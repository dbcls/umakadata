.row
  .col-xs-12.col-sm-12
  h2.page-header
    | Logs
  '

  - if @log.is_a?(Hash)
      table.table.table-bordered
        thead
          tr
            th.col-xs-5.col-sm-4.col-md-3
              | Name
            th
              | Value
        tbody
          tr.active data-tt-id=1 data-tt-parent-id=nil
            td colspan=2
              = @log['result']

          - @log['context'].each.with_index(1) do |first_content, first_level|
            - unless first_content.has_key?('result')
              - first_content.each do |key, value|
                tr data-tt-id="1_#{first_level}" data-tt-parent-id=1
                  td
                    = key
                  td
                    = value
            - else
              tr.active data-tt-id="1_#{first_level}" data-tt-parent-id=1
                td colspan=2
                  = first_content['result']

              - first_content['context'].each.with_index(1) do |second_content, second_level|
                - unless second_content.has_key?('result')
                  - second_content.each.with_index(1) do |(key, value), second_level|
                    - unless value.is_a?(Hash)
                      tr data-tt-id="1_#{first_level}_#{second_level}" data-tt-parent-id="1_#{first_level}"
                        td
                          = key
                        td
                          = value
                    - else
                      tr.active data-tt-id="1_#{first_level}_#{second_level}" data-tt-parent-id="1_#{first_level}"
                        td colspan=2
                          = key

                      - value.each.with_index(1) do |(key, value), third_level|
                        - unless value.is_a?(Hash)
                          tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}" data-tt-parent-id="1_#{first_level}_#{second_level}"
                            td
                              = key
                            td
                              = value
                        - else
                          tr.active data-tt-id="1_#{first_level}_#{second_level}_#{third_level}" data-tt-parent-id="1_#{first_level}_#{second_level}"
                            td colspan=2
                              = key

                          - value.each.with_index(1) do |(key, value), fourth_level|
                            tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}"
                              td
                                = key
                              td
                                = value

                - else
                  tr.active data-tt-id="1_#{first_level}_#{second_level}" data-tt-parent-id="1_#{first_level}"
                    td colspan=2
                      = second_content['result']

                  - second_content['context'].each.with_index(1) do |third_content, third_level|
                    - unless third_content.has_key?('result')
                      - third_content.each.with_index(1) do |(key, value), third_level|
                        - unless value.is_a?(Hash)
                          tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}" data-tt-parent-id="1_#{first_level}_#{second_level}"
                            td
                              = key
                            td
                              = value

                        - else
                          tr.active data-tt-id="1_#{first_level}_#{second_level}_#{third_level}" data-tt-parent-id="1_#{first_level}_#{second_level}"
                            td colspan=2
                              = key

                    - else
                      tr.active data-tt-id="1_#{first_level}_#{second_level}_#{third_level}" data-tt-parent-id="1_#{first_level}_#{second_level}"
                        td colspan=2
                          = third_content['result']

                      - third_content['context'].each do |fourth_content|
                        - fourth_content.each.with_index(1) do |(key, value), fourth_level|
                          - unless value.is_a?(Hash)
                            tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}"
                              td
                                = key
                              td
                                = value

                          - else
                            tr.active data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}"
                              td colspan=2
                                = key

                            - value.each.with_index(1) do |(key, value), fifth_level|
                              - unless value.is_a?(Hash)
                                tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}_#{fifth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}"
                                  td
                                    = key
                                  td
                                    = value
                              - else
                                tr.active data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}_#{fifth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}"
                                  td colspan=2
                                    = key

                                - value.each.with_index(1) do |(key, value), sixth_level|
                                  tr data-tt-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}_#{fifth_level}_#{sixth_level}" data-tt-parent-id="1_#{first_level}_#{second_level}_#{third_level}_#{fourth_level}_#{fifth_level}"
                                    td
                                      = key
                                    td
                                      = value

  - else
    p.h3
      | Error
    p.h4 = @log

javascript:
  $(function(){
    $(".table").treetable({ expandable: true });
    elements = $("tbody").children();
    elements.each(function () {
      if ($(this).attr('class').match(/branch/)) {
        id = $(this).attr('data-tt-id');
        if (id.match(/^\d+(_\d+){0,1}$/)) {
          $(".table").treetable('expandNode', id);
        }
      }
    });

    let JSON_REGEXP = /.*[\{|\[](.*)\{|\[$/;
    let XML_REGEXP = /.*<\?xml(.*)>/;
    $("tr td:first-child").each(function(i, bodyKey) {
      if (!$(bodyKey).text().match(/body/)) {
        return;
      }
      var formattedText = "";
      var text = "";
      try {
        var bodyValue = $(bodyKey).next();
        text = bodyValue.text();
        text = removeFirstBlankLine(text);
        if (text.match(JSON_REGEXP)) {
          text = text.replace(/\s*([\{|\[|\"|\'|\}\]].*[\n\r|\n|\r])/g, "$1");
          var json = JSON.stringify(JSON.parse(text), null, "    ");
          formattedText = formatText(json);
        } else if (text.match(XML_REGEXP)) {
          text = trimSpacesOfBeginingOfLine(text);
          var parser = new DOMParser();
          var xmlDocument = parser.parseFromString(text, "text/xml");
          if (xmlDocument.getElementsByTagName("parsererror").length == 0) {
            text = new XMLSerializer().serializeToString(xmlDocument);
          }
          formattedText = formatText(text);
        } else {
          text = trimSpacesOfBeginingOfLine(text);
          formattedText = formatText(text);
        }
        bodyValue.empty().append(formattedText);
      } catch (e) {
        text = trimSpacesOfBeginingOfLine(text);
        formattedText = formatText(text);
        bodyValue.empty().append(formattedText);
      }
    });

    function removeFirstBlankLine(text) {
      return text.replace(/\s*[\n\r|\n|\r]/, "");
    }

    function trimSpacesOfBeginingOfLine(text) {
      var length = text.split(/\S/)[0].length;
      var regExp = new RegExp('\\s{' + length + '}(\\S.*[\\n\\r|\\n|\\r])', 'g');
      return text.replace(regExp, "$1");
    }

    function sanitize(text) {
      return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    }

    function formatText(text) {
      return sanitize(text).replace(/[\n\r|\n|\r]/g, "<br/>").replace(/\t/, "&nbsp;&nbsp;&nbsp;&nbsp;").replace(/\s/g, "&nbsp;")
    }

  });
